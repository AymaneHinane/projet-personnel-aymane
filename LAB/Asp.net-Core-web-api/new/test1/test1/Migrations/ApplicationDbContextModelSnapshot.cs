// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test1.DB;

#nullable disable

namespace test1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesBookId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "CategoriesBookId");

                    b.HasIndex("CategoriesBookId");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("test1.Model.Shema2.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.HasKey("AuthorId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("test1.Model.Shema2.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.HasKey("BookId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("test1.Model.Shema2.BookAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("test1.Model.Shema2.Category", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.HasKey("BookId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("test1.Model.Shema2.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CustomerId");

                    b.HasIndex("FirstName")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("test1.Model.Shema2.LineItem", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.HasKey("BookId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("LineItem", t =>
                        {
                            t.HasCheckConstraint("CheckQuantityNotEqualZero", "[OrderQuantity] >= 0");
                        });
                });

            modelBuilder.Entity("test1.Model.Shema2.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("test1.Model.Shema2.PriceOffers", b =>
                {
                    b.Property<int>("PriceOffersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceOffersId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("PriceOffersId");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("PriceOffers");
                });

            modelBuilder.Entity("test1.Model.Shema2.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("test1.Model.Shema2.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test1.Model.Shema2.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("test1.Model.Shema2.BookAuthor", b =>
                {
                    b.HasOne("test1.Model.Shema2.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test1.Model.Shema2.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("test1.Model.Shema2.LineItem", b =>
                {
                    b.HasOne("test1.Model.Shema2.Book", "Book")
                        .WithMany("lineItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test1.Model.Shema2.Order", "Order")
                        .WithMany("lineItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("test1.Model.Shema2.Order", b =>
                {
                    b.HasOne("test1.Model.Shema2.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("test1.Model.Shema2.PriceOffers", b =>
                {
                    b.HasOne("test1.Model.Shema2.Book", "Book")
                        .WithOne("PriceOffers")
                        .HasForeignKey("test1.Model.Shema2.PriceOffers", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("test1.Model.Shema2.Review", b =>
                {
                    b.HasOne("test1.Model.Shema2.Book", "Book")
                        .WithMany("Review")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("test1.Model.Shema2.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("test1.Model.Shema2.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("PriceOffers");

                    b.Navigation("Review");

                    b.Navigation("lineItems");
                });

            modelBuilder.Entity("test1.Model.Shema2.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("test1.Model.Shema2.Order", b =>
                {
                    b.Navigation("lineItems");
                });
#pragma warning restore 612, 618
        }
    }
}
