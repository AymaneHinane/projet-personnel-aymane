// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test8.DB;

#nullable disable

namespace tp9.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20221116133027_customer_order_dbset")]
    partial class customer_order_dbset
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BooksTags", b =>
                {
                    b.Property<int>("BooksBookId")
                        .HasColumnType("int");

                    b.Property<string>("TagsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BooksBookId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("BooksTags", (string)null);

                    b.HasData(
                        new
                        {
                            BooksBookId = 1,
                            TagsId = "HW"
                        },
                        new
                        {
                            BooksBookId = 3,
                            TagsId = "HA"
                        },
                        new
                        {
                            BooksBookId = 3,
                            TagsId = "HD"
                        });
                });

            modelBuilder.Entity("test8.Model.Library.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Name = "joseph",
                            WebUrl = "http//helloworld.org"
                        },
                        new
                        {
                            AuthorId = 2,
                            Name = "bahari",
                            WebUrl = "http//bahari.com"
                        },
                        new
                        {
                            AuthorId = 3,
                            Name = "noha",
                            WebUrl = "http//bahari.com"
                        },
                        new
                        {
                            AuthorId = 4,
                            Name = "berdi",
                            WebUrl = "http//bahari.com"
                        });
                });

            modelBuilder.Entity("test8.Model.Library.BookAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthor");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 2
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 3
                        });
                });

            modelBuilder.Entity("test8.Model.Library.Books", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Description = "basic of coding",
                            Price = 50.00m,
                            PublishedOn = new DateTime(2023, 11, 19, 13, 30, 27, 146, DateTimeKind.Utc).AddTicks(7390),
                            Publisher = "Wakanim",
                            SoftDeleted = true,
                            Title = "Hello wolrd"
                        },
                        new
                        {
                            BookId = 2,
                            Description = "basic of footbal coathing",
                            Price = 70.00m,
                            PublishedOn = new DateTime(2024, 11, 24, 13, 30, 27, 146, DateTimeKind.Utc).AddTicks(7400),
                            Publisher = "Shona",
                            SoftDeleted = true,
                            Title = "foot mangering"
                        },
                        new
                        {
                            BookId = 3,
                            Description = "basic of hardwar tools",
                            Price = 60.00m,
                            PublishedOn = new DateTime(2023, 11, 24, 13, 30, 27, 146, DateTimeKind.Utc).AddTicks(7400),
                            Publisher = "ward",
                            SoftDeleted = false,
                            Title = "hardwar"
                        });
                });

            modelBuilder.Entity("test8.Model.Library.PriceOffers", b =>
                {
                    b.Property<int>("PriceOffersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceOffersId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PromotionalText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriceOffersId");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("PriceOffers");

                    b.HasData(
                        new
                        {
                            PriceOffersId = 1,
                            BookId = 1,
                            NewPrice = 30.00m,
                            PromotionalText = "Save 1$ if you ordered 40 unit"
                        },
                        new
                        {
                            PriceOffersId = 2,
                            BookId = 2,
                            NewPrice = 20.00m,
                            PromotionalText = "Save 2$ if you ordered 20 unit"
                        },
                        new
                        {
                            PriceOffersId = 3,
                            BookId = 3,
                            NewPrice = 200.00m,
                            PromotionalText = "Save 2$ if you ordered 20 unit"
                        });
                });

            modelBuilder.Entity("test8.Model.Library.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NumStars")
                        .HasColumnType("float");

                    b.Property<string>("VoterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            BookId = 1,
                            Comment = "I Love this book a lot",
                            NumStars = 5.0,
                            VoterName = "anayelle"
                        },
                        new
                        {
                            ReviewId = 2,
                            BookId = 2,
                            Comment = "I hate this book",
                            NumStars = 3.0,
                            VoterName = "joelle"
                        },
                        new
                        {
                            ReviewId = 3,
                            BookId = 3,
                            Comment = "I hate this book",
                            NumStars = 1.0,
                            VoterName = "alie"
                        },
                        new
                        {
                            ReviewId = 4,
                            BookId = 3,
                            Comment = "I love this book",
                            NumStars = 4.0,
                            VoterName = "noor"
                        });
                });

            modelBuilder.Entity("test8.Model.Library.Tags", b =>
                {
                    b.Property<string>("TagsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TagsId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagsId = "HW"
                        },
                        new
                        {
                            TagsId = "FM"
                        },
                        new
                        {
                            TagsId = "HA"
                        },
                        new
                        {
                            TagsId = "HD"
                        });
                });

            modelBuilder.Entity("tp9.Library.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("tp9.Library.LineItem", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quatity")
                        .HasColumnType("int");

                    b.HasKey("BookId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("LineItem");
                });

            modelBuilder.Entity("tp9.Library.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOrderedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BooksTags", b =>
                {
                    b.HasOne("test8.Model.Library.Books", null)
                        .WithMany()
                        .HasForeignKey("BooksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test8.Model.Library.Tags", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("test8.Model.Library.BookAuthor", b =>
                {
                    b.HasOne("test8.Model.Library.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("test8.Model.Library.Books", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("test8.Model.Library.PriceOffers", b =>
                {
                    b.HasOne("test8.Model.Library.Books", "Book")
                        .WithOne("Promotion")
                        .HasForeignKey("test8.Model.Library.PriceOffers", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("test8.Model.Library.Review", b =>
                {
                    b.HasOne("test8.Model.Library.Books", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("tp9.Library.LineItem", b =>
                {
                    b.HasOne("test8.Model.Library.Books", "Book")
                        .WithMany("lineItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tp9.Library.Orders", "Order")
                        .WithMany("lineItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("tp9.Library.Orders", b =>
                {
                    b.HasOne("tp9.Library.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("test8.Model.Library.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("test8.Model.Library.Books", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("Promotion");

                    b.Navigation("Reviews");

                    b.Navigation("lineItems");
                });

            modelBuilder.Entity("tp9.Library.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("tp9.Library.Orders", b =>
                {
                    b.Navigation("lineItems");
                });
#pragma warning restore 612, 618
        }
    }
}
